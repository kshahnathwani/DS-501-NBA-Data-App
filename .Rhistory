movielens = 'https://raw.githubusercontent.com/dnchari/DS501_MovieLens/master/Results/unifiedMLDataMulti.csv'
mlData = read.csv(movielens)
}
movielens = 'https://raw.githubusercontent.com/dnchari/DS501_MovieLens/master/Results/unifiedMLDataMulti.csv'
mlData = read.csv(movielens)
}
movielens = 'https://raw.githubusercontent.com/dnchari/DS501_MovieLens/master/Results/unifiedMLDataMulti.csv'
mlData = read.csv(movielens)
}
movielens = 'https://raw.githubusercontent.com/dnchari/DS501_MovieLens/master/Results/unifiedMLDataMulti.csv'
mlData = read.csv(movielens)
avg_ratings <- aggregate(rating ~ movie_title, data = mlData, FUN = mean)
highly_rated_movies <- avg_ratings[avg_ratings$rating > 4.5, ]
num_highly_rated_movies <- nrow(highly_rated_movies)
cat("Number of movies with average rating over 4.5 overall:", num_highly_rated_movies, "\n")
avg_ratings_men <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "M", ], FUN = mean)
highly_rated_men <- avg_ratings_men[avg_ratings_men$rating > 4.5, ]
num_highly_rated_men <- nrow(highly_rated_men)
cat("Number of movies with average rating over 4.5 among men:", num_highly_rated_men, "\n")
avg_ratings_women <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "F", ], FUN = mean)
highly_rated_women <- avg_ratings_women[avg_ratings_women$rating > 4.5, ]
num_highly_rated_women <- nrow(highly_rated_women)
cat("Number of movies with average rating over 4.5 among women:", num_highly_rated_women, "\n")
median_ratings_men_30 <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "M" & mlData$age > 30, ], FUN = median)
highly_rated_men_30 <- median_ratings_men_30[median_ratings_men_30$rating > 4.5, ]
num_highly_rated_men_30 <- nrow(highly_rated_men_30)
cat("Number of movies with median rating over 4.5 among men over age 30:", num_highly_rated_men_30, "\n")
median_ratings_women_30 <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "F" & mlData$age > 30, ], FUN = median)
highly_rated_women_30 <- median_ratings_women_30[median_ratings_women_30$rating > 4.5, ]
num_highly_rated_women_30 <- nrow(highly_rated_women_30)
cat("Number of movies with median rating over 4.5 among women over age 30:", num_highly_rated_women_30, "\n")
popularity <- aggregate(rating ~ movie_title, data = mlData, FUN = length)
colnames(popularity)[2] <- "num_ratings" # Rename the second column to num_ratings
most_popular_movies <- popularity[order(-popularity$num_ratings), ][1:10, ]
cat("Ten most popular movies:\n")
for (movie in most_popular_movies$movie_title) {
cat(movie, "\n")
avg_ratings <- aggregate(rating ~ movie_title, data = mlData, FUN = mean)
highly_rated_movies <- avg_ratings[avg_ratings$rating > 4.5, ]
num_highly_rated_movies <- nrow(highly_rated_movies)
cat("Number of movies with average rating over 4.5 overall:", num_highly_rated_movies, "\n")
avg_ratings_men <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "M", ], FUN = mean)
highly_rated_men <- avg_ratings_men[avg_ratings_men$rating > 4.5, ]
num_highly_rated_men <- nrow(highly_rated_men)
cat("Number of movies with average rating over 4.5 among men:", num_highly_rated_men, "\n")
avg_ratings_women <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "F", ], FUN = mean)
highly_rated_women <- avg_ratings_women[avg_ratings_women$rating > 4.5, ]
num_highly_rated_women <- nrow(highly_rated_women)
cat("Number of movies with average rating over 4.5 among women:", num_highly_rated_women, "\n")
median_ratings_men_30 <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "M" & mlData$age > 30, ], FUN = median)
highly_rated_men_30 <- median_ratings_men_30[median_ratings_men_30$rating > 4.5, ]
num_highly_rated_men_30 <- nrow(highly_rated_men_30)
cat("Number of movies with median rating over 4.5 among men over age 30:", num_highly_rated_men_30, "\n")
median_ratings_women_30 <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "F" & mlData$age > 30, ], FUN = median)
highly_rated_women_30 <- median_ratings_women_30[median_ratings_women_30$rating > 4.5, ]
num_highly_rated_women_30 <- nrow(highly_rated_women_30)
cat("Number of movies with median rating over 4.5 among women over age 30:", num_highly_rated_women_30, "\n")
popularity <- aggregate(rating ~ movie_title, data = mlData, FUN = length)
colnames(popularity)[2] <- "num_ratings" # Rename the second column to num_ratings
most_popular_movies <- popularity[order(-popularity$num_ratings), ][1:10, ]
cat("Ten most popular movies:\n")
for (movie in most_popular_movies$movie_title) {
cat(movie, "\n")
}
# Plot a histogram of the ratings of all movies
hist(mlData$rating, breaks = 20, col = "blue", main = "Histogram of All Movie Ratings", xlab = "Rating", ylab = "Count")
# Plot a histogram of the number of ratings each movie received
ratings_per_movie <- aggregate(rating ~ movie_title, data = mlData, FUN = length)
hist(ratings_per_movie$rating, breaks = 20, col = "green", main = "Histogram of Number of Ratings per Movie", xlab = "Number of Ratings", ylab = "Count")
# Plot a histogram of the average rating for each movie
avg_ratings_per_movie <- aggregate(rating ~ movie_title, data = mlData, FUN = mean)
hist(avg_ratings_per_movie$rating, breaks = 20, col = "purple", main = "Histogram of Average Rating per Movie", xlab = "Average Rating", ylab = "Count")
# Plot a histogram of the average rating for movies which are rated more than 100 times
movies_rated_more_than_100 <- ratings_per_movie[ratings_per_movie$rating > 100, ]
avg_ratings_more_than_100 <- merge(movies_rated_more_than_100, avg_ratings_per_movie, by = "movie_title")
hist(avg_ratings_more_than_100$rating.y, breaks = 20, col = "red", main = "Histogram of Average Rating for Movies Rated More Than 100 Times", xlab = "Average Rating", ylab = "Count")
# Observations about the tails of the histograms
cat("Observations about the tails of the histograms:\n")
cat("The histogram for all movies shows a wider distribution with more extreme values, while the histogram for movies rated more than 100 times is more centered with fewer extremes.\n")
cat("Highly rated movies with more than 100 ratings are more likely to be consistently good compared to those with fewer ratings.\n")
# Conjectures about the distribution of ratings
# Example conjecture: Younger people (under 18) are more likely to rate movies extremely (1 or 5)
extreme_ratings_under_18 <- mlData[mlData$age < 18 & (mlData$rating == 1 | mlData$rating == 5), ]
extreme_rating_proportion_under_18 <- nrow(extreme_ratings_under_18) / nrow(mlData[mlData$age < 18, ])
cat("Proportion of extreme ratings (1 or 5) by people under 18:", extreme_rating_proportion_under_18, "\n")
# Load necessary data
movielens = 'https://raw.githubusercontent.com/dnchari/DS501_MovieLens/master/Results/unifiedMLDataMulti.csv'
mlData = read.csv(movielens)
# Aggregate average ratings by movie and gender
avg_ratings_gender <- aggregate(rating ~ movie_title + gender, data = mlData, FUN = mean)
avg_ratings_wide <- reshape(avg_ratings_gender, idvar = "movie_title", timevar = "gender", direction = "wide")
# Rename columns for clarity
colnames(avg_ratings_wide) <- c("movie_title", "rating_men", "rating_women")
# Scatter plot of men versus women and their mean rating for every movie
plot(avg_ratings_wide$rating_men, avg_ratings_wide$rating_women,
xlab = "Average Rating by Men", ylab = "Average Rating by Women",
main = "Scatter Plot of Average Ratings by Men vs Women",
col = "blue", pch = 19)
# Add a line y=x for reference
abline(a = 0, b = 1, col = "red")
# Aggregate number of ratings by movie
ratings_count <- aggregate(rating ~ movie_title, data = mlData, FUN = length)
colnames(ratings_count) <- c("movie_title", "num_ratings")
# Merge average ratings with ratings count
avg_ratings_wide <- merge(avg_ratings_wide, ratings_count, by = "movie_title")
# Scatter plot for movies rated more than 200 times
movies_rated_more_than_200 <- avg_ratings_wide[avg_ratings_wide$num_ratings > 200, ]
plot(movies_rated_more_than_200$rating_men, movies_rated_more_than_200$rating_women,
xlab = "Average Rating by Men", ylab = "Average Rating by Women",
main = "Scatter Plot of Average Ratings by Men vs Women (Movies Rated > 200 Times)",
col = "green", pch = 19)
# Add a line y=x for reference
abline(a = 0, b = 1, col = "red")
# Compute correlation coefficient between the ratings of men and women
correlation_all <- cor(avg_ratings_wide$rating_men, avg_ratings_wide$rating_women, use = "complete.obs")
cat("Correlation coefficient between ratings of men and women (all movies):", correlation_all, "\n")
correlation_200 <- cor(movies_rated_more_than_200$rating_men, movies_rated_more_than_200$rating_women, use = "complete.obs")
cat("Correlation coefficient between ratings of men and women (movies rated > 200 times):", correlation_200, "\n")
# Observations
cat("Observations:\n")
cat("The correlation coefficients suggest that the ratings by men and women are quite similar, as the correlation is close to 1. This indicates a strong positive relationship between the ratings given by both genders.\n")
cat("Ratings are more consistent for movies that have been rated more than 200 times, as indicated by the slightly higher correlation coefficient.\n")
# Conjectures
# Example conjecture: Ratings by younger men and women (under 30) might be more similar
avg_ratings_age_gender <- aggregate(rating ~ movie_title + gender + age, data = mlData, FUN = mean)
avg_ratings_age_gender_young <- avg_ratings_age_gender[avg_ratings_age_gender$age < 30, ]
avg_ratings_wide_young <- reshape(avg_ratings_age_gender_young, idvar = "movie_title", timevar = "gender", direction = "wide")
colnames(avg_ratings_wide_young) <- c("movie_title", "rating_men", "rating_women")
correlation_young <- cor(avg_ratings_wide_young$rating_men, avg_ratings_wide_young$rating_women, use = "complete.obs")
cat("Correlation coefficient between ratings of men and women (under 30):", correlation_young, "\n")
movielens = 'https://raw.githubusercontent.com/dnchari/DS501_MovieLens/master/Results/unifiedMLDataMulti.csv'
mlData = read.csv(movielens)
avg_ratings <- aggregate(rating ~ movie_title, data = mlData, FUN = mean)
highly_rated_movies <- avg_ratings[avg_ratings$rating > 4.5, ]
num_highly_rated_movies <- nrow(highly_rated_movies)
cat("Number of movies with average rating over 4.5 overall:", num_highly_rated_movies, "\n")
avg_ratings_men <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "M", ], FUN = mean)
highly_rated_men <- avg_ratings_men[avg_ratings_men$rating > 4.5, ]
num_highly_rated_men <- nrow(highly_rated_men)
cat("Number of movies with average rating over 4.5 among men:", num_highly_rated_men, "\n")
avg_ratings_women <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "F", ], FUN = mean)
highly_rated_women <- avg_ratings_women[avg_ratings_women$rating > 4.5, ]
num_highly_rated_women <- nrow(highly_rated_women)
cat("Number of movies with average rating over 4.5 among women:", num_highly_rated_women, "\n")
median_ratings_men_30 <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "M" & mlData$age > 30, ], FUN = median)
highly_rated_men_30 <- median_ratings_men_30[median_ratings_men_30$rating > 4.5, ]
num_highly_rated_men_30 <- nrow(highly_rated_men_30)
cat("Number of movies with median rating over 4.5 among men over age 30:", num_highly_rated_men_30, "\n")
median_ratings_women_30 <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "F" & mlData$age > 30, ], FUN = median)
highly_rated_women_30 <- median_ratings_women_30[median_ratings_women_30$rating > 4.5, ]
num_highly_rated_women_30 <- nrow(highly_rated_women_30)
cat("Number of movies with median rating over 4.5 among women over age 30:", num_highly_rated_women_30, "\n")
popularity <- aggregate(rating ~ movie_title, data = mlData, FUN = length)
colnames(popularity)[2] <- "num_ratings" # Rename the second column to num_ratings
most_popular_movies <- popularity[order(-popularity$num_ratings), ][1:10, ]
cat("Ten most popular movies:\n")
for (movie in most_popular_movies$movie_title) {
cat(movie, "\n")
}
# Plot a histogram of the ratings of all movies
hist(mlData$rating, breaks = 20, col = "blue", main = "Histogram of All Movie Ratings", xlab = "Rating", ylab = "Count")
# Plot a histogram of the number of ratings each movie received
ratings_per_movie <- aggregate(rating ~ movie_title, data = mlData, FUN = length)
hist(ratings_per_movie$rating, breaks = 20, col = "green", main = "Histogram of Number of Ratings per Movie", xlab = "Number of Ratings", ylab = "Count")
# Plot a histogram of the average rating for each movie
avg_ratings_per_movie <- aggregate(rating ~ movie_title, data = mlData, FUN = mean)
hist(avg_ratings_per_movie$rating, breaks = 20, col = "purple", main = "Histogram of Average Rating per Movie", xlab = "Average Rating", ylab = "Count")
# Plot a histogram of the average rating for movies which are rated more than 100 times
movies_rated_more_than_100 <- ratings_per_movie[ratings_per_movie$rating > 100, ]
avg_ratings_more_than_100 <- merge(movies_rated_more_than_100, avg_ratings_per_movie, by = "movie_title")
hist(avg_ratings_more_than_100$rating.y, breaks = 20, col = "red", main = "Histogram of Average Rating for Movies Rated More Than 100 Times", xlab = "Average Rating", ylab = "Count")
# Observations about the tails of the histograms
cat("Observations about the tails of the histograms:\n")
cat("The histogram for all movies shows a wider distribution with more extreme values, while the histogram for movies rated more than 100 times is more centered with fewer extremes.\n")
cat("Highly rated movies with more than 100 ratings are more likely to be consistently good compared to those with fewer ratings.\n")
# Conjectures about the distribution of ratings
# Example conjecture: Younger people (under 18) are more likely to rate movies extremely (1 or 5)
extreme_ratings_under_18 <- mlData[mlData$age < 18 & (mlData$rating == 1 | mlData$rating == 5), ]
extreme_rating_proportion_under_18 <- nrow(extreme_ratings_under_18) / nrow(mlData[mlData$age < 18, ])
cat("Proportion of extreme ratings (1 or 5) by people under 18:", extreme_rating_proportion_under_18, "\n")
# Load necessary data
movielens = 'https://raw.githubusercontent.com/dnchari/DS501_MovieLens/master/Results/unifiedMLDataMulti.csv'
mlData = read.csv(movielens)
# Aggregate average ratings by movie and gender
avg_ratings_gender <- aggregate(rating ~ movie_title + gender, data = mlData, FUN = mean)
avg_ratings_wide <- reshape(avg_ratings_gender, idvar = "movie_title", timevar = "gender", direction = "wide")
# Rename columns for clarity
colnames(avg_ratings_wide) <- c("movie_title", "rating_men", "rating_women")
# Scatter plot of men versus women and their mean rating for every movie
plot(avg_ratings_wide$rating_men, avg_ratings_wide$rating_women,
xlab = "Average Rating by Men", ylab = "Average Rating by Women",
main = "Scatter Plot of Average Ratings by Men vs Women",
col = "blue", pch = 19)
# Add a line y=x for reference
abline(a = 0, b = 1, col = "red")
# Aggregate number of ratings by movie
ratings_count <- aggregate(rating ~ movie_title, data = mlData, FUN = length)
colnames(ratings_count) <- c("movie_title", "num_ratings")
# Merge average ratings with ratings count
avg_ratings_wide <- merge(avg_ratings_wide, ratings_count, by = "movie_title")
# Scatter plot for movies rated more than 200 times
movies_rated_more_than_200 <- avg_ratings_wide[avg_ratings_wide$num_ratings > 200, ]
plot(movies_rated_more_than_200$rating_men, movies_rated_more_than_200$rating_women,
xlab = "Average Rating by Men", ylab = "Average Rating by Women",
main = "Scatter Plot of Average Ratings by Men vs Women (Movies Rated > 200 Times)",
col = "green", pch = 19)
# Add a line y=x for reference
abline(a = 0, b = 1, col = "red")
# Compute correlation coefficient between the ratings of men and women
correlation_all <- cor(avg_ratings_wide$rating_men, avg_ratings_wide$rating_women, use = "complete.obs")
cat("Correlation coefficient between ratings of men and women (all movies):", correlation_all, "\n")
correlation_200 <- cor(movies_rated_more_than_200$rating_men, movies_rated_more_than_200$rating_women, use = "complete.obs")
cat("Correlation coefficient between ratings of men and women (movies rated > 200 times):", correlation_200, "\n")
# Observations
cat("Observations:\n")
cat("The correlation coefficients suggest that the ratings by men and women are quite similar, as the correlation is close to 1. This indicates a strong positive relationship between the ratings given by both genders.\n")
cat("Ratings are more consistent for movies that have been rated more than 200 times, as indicated by the slightly higher correlation coefficient.\n")
# Conjectures
# Example conjecture: Ratings by younger men and women (under 30) might be more similar
avg_ratings_age_gender <- aggregate(rating ~ movie_title + gender + age, data = mlData, FUN = mean)
avg_ratings_age_gender_young <- avg_ratings_age_gender[avg_ratings_age_gender$age < 30, ]
avg_ratings_wide_young <- reshape(avg_ratings_age_gender_young, idvar = "movie_title", timevar = "gender", direction = "wide")
colnames(avg_ratings_wide_young) <- c("movie_title", "rating_men", "rating_women")
correlation_young <- cor(avg_ratings_wide_young$rating_men, avg_ratings_wide_young$rating_women, use = "complete.obs")
cat("Correlation coefficient between ratings of men and women (under 30):", correlation_young, "\n")
movielens = 'https://raw.githubusercontent.com/dnchari/DS501_MovieLens/master/Results/unifiedMLDataMulti.csv'
mlData = read.csv(movielens)
install.packages('tinytex')
tinytex::install_tinytex()
install.packages("rmarkdown")
install.packages("tinytex")
install.packages("tinytex")
movielens = 'https://raw.githubusercontent.com/dnchari/DS501_MovieLens/master/Results/unifiedMLDataMulti.csv'
mlData = read.csv(movielens)
avg_ratings <- aggregate(rating ~ movie_title, data = mlData, FUN = mean)
highly_rated_movies <- avg_ratings[avg_ratings$rating > 4.5, ]
num_highly_rated_movies <- nrow(highly_rated_movies)
cat("Number of movies with average rating over 4.5 overall:", num_highly_rated_movies, "\n")
avg_ratings_men <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "M", ], FUN = mean)
highly_rated_men <- avg_ratings_men[avg_ratings_men$rating > 4.5, ]
num_highly_rated_men <- nrow(highly_rated_men)
cat("Number of movies with average rating over 4.5 among men:", num_highly_rated_men, "\n")
avg_ratings_women <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "F", ], FUN = mean)
highly_rated_women <- avg_ratings_women[avg_ratings_women$rating > 4.5, ]
num_highly_rated_women <- nrow(highly_rated_women)
cat("Number of movies with average rating over 4.5 among women:", num_highly_rated_women, "\n")
median_ratings_men_30 <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "M" & mlData$age > 30, ], FUN = median)
highly_rated_men_30 <- median_ratings_men_30[median_ratings_men_30$rating > 4.5, ]
num_highly_rated_men_30 <- nrow(highly_rated_men_30)
cat("Number of movies with median rating over 4.5 among men over age 30:", num_highly_rated_men_30, "\n")
median_ratings_women_30 <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "F" & mlData$age > 30, ], FUN = median)
highly_rated_women_30 <- median_ratings_women_30[median_ratings_women_30$rating > 4.5, ]
num_highly_rated_women_30 <- nrow(highly_rated_women_30)
cat("Number of movies with median rating over 4.5 among women over age 30:", num_highly_rated_women_30, "\n")
popularity <- aggregate(rating ~ movie_title, data = mlData, FUN = length)
colnames(popularity)[2] <- "num_ratings" # Rename the second column to num_ratings
most_popular_movies <- popularity[order(-popularity$num_ratings), ][1:10, ]
cat("Ten most popular movies:\n")
for (movie in most_popular_movies$movie_title) {
cat(movie, "\n")
}
# Plot a histogram of the ratings of all movies
hist(mlData$rating, breaks = 20, col = "blue", main = "Histogram of All Movie Ratings", xlab = "Rating", ylab = "Count")
# Plot a histogram of the number of ratings each movie received
ratings_per_movie <- aggregate(rating ~ movie_title, data = mlData, FUN = length)
hist(ratings_per_movie$rating, breaks = 20, col = "green", main = "Histogram of Number of Ratings per Movie", xlab = "Number of Ratings", ylab = "Count")
# Plot a histogram of the average rating for each movie
avg_ratings_per_movie <- aggregate(rating ~ movie_title, data = mlData, FUN = mean)
hist(avg_ratings_per_movie$rating, breaks = 20, col = "purple", main = "Histogram of Average Rating per Movie", xlab = "Average Rating", ylab = "Count")
# Plot a histogram of the average rating for movies which are rated more than 100 times
movies_rated_more_than_100 <- ratings_per_movie[ratings_per_movie$rating > 100, ]
avg_ratings_more_than_100 <- merge(movies_rated_more_than_100, avg_ratings_per_movie, by = "movie_title")
hist(avg_ratings_more_than_100$rating.y, breaks = 20, col = "red", main = "Histogram of Average Rating for Movies Rated More Than 100 Times", xlab = "Average Rating", ylab = "Count")
# Observations about the tails of the histograms
cat("Observations about the tails of the histograms:\n")
cat("The histogram for all movies shows a wider distribution with more extreme values, while the histogram for movies rated more than 100 times is more centered with fewer extremes.\n")
cat("Highly rated movies with more than 100 ratings are more likely to be consistently good compared to those with fewer ratings.\n")
# Conjectures about the distribution of ratings
# Example conjecture: Younger people (under 18) are more likely to rate movies extremely (1 or 5)
extreme_ratings_under_18 <- mlData[mlData$age < 18 & (mlData$rating == 1 | mlData$rating == 5), ]
extreme_rating_proportion_under_18 <- nrow(extreme_ratings_under_18) / nrow(mlData[mlData$age < 18, ])
cat("Proportion of extreme ratings (1 or 5) by people under 18:", extreme_rating_proportion_under_18, "\n")
# Load necessary data
movielens = 'https://raw.githubusercontent.com/dnchari/DS501_MovieLens/master/Results/unifiedMLDataMulti.csv'
mlData = read.csv(movielens)
# Aggregate average ratings by movie and gender
avg_ratings_gender <- aggregate(rating ~ movie_title + gender, data = mlData, FUN = mean)
avg_ratings_wide <- reshape(avg_ratings_gender, idvar = "movie_title", timevar = "gender", direction = "wide")
# Rename columns for clarity
colnames(avg_ratings_wide) <- c("movie_title", "rating_men", "rating_women")
# Scatter plot of men versus women and their mean rating for every movie
plot(avg_ratings_wide$rating_men, avg_ratings_wide$rating_women,
xlab = "Average Rating by Men", ylab = "Average Rating by Women",
main = "Scatter Plot of Average Ratings by Men vs Women",
col = "blue", pch = 19)
# Add a line y=x for reference
abline(a = 0, b = 1, col = "red")
# Aggregate number of ratings by movie
ratings_count <- aggregate(rating ~ movie_title, data = mlData, FUN = length)
colnames(ratings_count) <- c("movie_title", "num_ratings")
# Merge average ratings with ratings count
avg_ratings_wide <- merge(avg_ratings_wide, ratings_count, by = "movie_title")
# Scatter plot for movies rated more than 200 times
movies_rated_more_than_200 <- avg_ratings_wide[avg_ratings_wide$num_ratings > 200, ]
plot(movies_rated_more_than_200$rating_men, movies_rated_more_than_200$rating_women,
xlab = "Average Rating by Men", ylab = "Average Rating by Women",
main = "Scatter Plot of Average Ratings by Men vs Women (Movies Rated > 200 Times)",
col = "green", pch = 19)
# Add a line y=x for reference
abline(a = 0, b = 1, col = "red")
# Compute correlation coefficient between the ratings of men and women
correlation_all <- cor(avg_ratings_wide$rating_men, avg_ratings_wide$rating_women, use = "complete.obs")
cat("Correlation coefficient between ratings of men and women (all movies):", correlation_all, "\n")
correlation_200 <- cor(movies_rated_more_than_200$rating_men, movies_rated_more_than_200$rating_women, use = "complete.obs")
cat("Correlation coefficient between ratings of men and women (movies rated > 200 times):", correlation_200, "\n")
# Observations
cat("Observations:\n")
cat("The correlation coefficients suggest that the ratings by men and women are quite similar, as the correlation is close to 1. This indicates a strong positive relationship between the ratings given by both genders.\n")
cat("Ratings are more consistent for movies that have been rated more than 200 times, as indicated by the slightly higher correlation coefficient.\n")
# Conjectures
# Example conjecture: Ratings by younger men and women (under 30) might be more similar
avg_ratings_age_gender <- aggregate(rating ~ movie_title + gender + age, data = mlData, FUN = mean)
avg_ratings_age_gender_young <- avg_ratings_age_gender[avg_ratings_age_gender$age < 30, ]
avg_ratings_wide_young <- reshape(avg_ratings_age_gender_young, idvar = "movie_title", timevar = "gender", direction = "wide")
colnames(avg_ratings_wide_young) <- c("movie_title", "rating_men", "rating_women")
correlation_young <- cor(avg_ratings_wide_young$rating_men, avg_ratings_wide_young$rating_women, use = "complete.obs")
cat("Correlation coefficient between ratings of men and women (under 30):", correlation_young, "\n")
movielens = 'https://raw.githubusercontent.com/dnchari/DS501_MovieLens/master/Results/unifiedMLDataMulti.csv'
mlData = read.csv(movielens)
avg_ratings <- aggregate(rating ~ movie_title, data = mlData, FUN = mean)
highly_rated_movies <- avg_ratings[avg_ratings$rating > 4.5, ]
num_highly_rated_movies <- nrow(highly_rated_movies)
cat("Number of movies with average rating over 4.5 overall:", num_highly_rated_movies, "\n")
avg_ratings_men <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "M", ], FUN = mean)
highly_rated_men <- avg_ratings_men[avg_ratings_men$rating > 4.5, ]
num_highly_rated_men <- nrow(highly_rated_men)
cat("Number of movies with average rating over 4.5 among men:", num_highly_rated_men, "\n")
avg_ratings_women <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "F", ], FUN = mean)
highly_rated_women <- avg_ratings_women[avg_ratings_women$rating > 4.5, ]
num_highly_rated_women <- nrow(highly_rated_women)
cat("Number of movies with average rating over 4.5 among women:", num_highly_rated_women, "\n")
median_ratings_men_30 <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "M" & mlData$age > 30, ], FUN = median)
highly_rated_men_30 <- median_ratings_men_30[median_ratings_men_30$rating > 4.5, ]
num_highly_rated_men_30 <- nrow(highly_rated_men_30)
cat("Number of movies with median rating over 4.5 among men over age 30:", num_highly_rated_men_30, "\n")
median_ratings_women_30 <- aggregate(rating ~ movie_title, data = mlData[mlData$gender == "F" & mlData$age > 30, ], FUN = median)
highly_rated_women_30 <- median_ratings_women_30[median_ratings_women_30$rating > 4.5, ]
num_highly_rated_women_30 <- nrow(highly_rated_women_30)
cat("Number of movies with median rating over 4.5 among women over age 30:", num_highly_rated_women_30, "\n")
popularity <- aggregate(rating ~ movie_title, data = mlData, FUN = length)
colnames(popularity)[2] <- "num_ratings" # Rename the second column to num_ratings
most_popular_movies <- popularity[order(-popularity$num_ratings), ][1:10, ]
cat("Ten most popular movies:\n")
for (movie in most_popular_movies$movie_title) {
cat(movie, "\n")
}
hist(mlData$rating, breaks = 20, col = "blue", main = "Histogram of All Movie Ratings", xlab = "Rating", ylab = "Count")
ratings_per_movie <- aggregate(rating ~ movie_title, data = mlData, FUN = length)
hist(ratings_per_movie$rating, breaks = 20, col = "green", main = "Histogram of Number of Ratings per Movie", xlab = "Number of Ratings", ylab = "Count")
avg_ratings_per_movie <- aggregate(rating ~ movie_title, data = mlData, FUN = mean)
hist(avg_ratings_per_movie$rating, breaks = 20, col = "purple", main = "Histogram of Average Rating per Movie", xlab = "Average Rating", ylab = "Count")
movies_rated_more_than_100 <- ratings_per_movie[ratings_per_movie$rating > 100, ]
avg_ratings_more_than_100 <- merge(movies_rated_more_than_100, avg_ratings_per_movie, by = "movie_title")
hist(avg_ratings_more_than_100$rating.y, breaks = 20, col = "red", main = "Histogram of Average Rating for Movies Rated More Than 100 Times", xlab = "Average Rating", ylab = "Count")
# Observations about the tails of the histograms
cat("Observations about the tails of the histograms:\n")
cat("The histogram for all movies shows a wider distribution with more extreme values, while the histogram for movies rated more than 100 times is more centered with fewer extremes.\n")
cat("Highly rated movies with more than 100 ratings are more likely to be consistently good compared to those with fewer ratings.\n")
# Conjectures about the distribution of ratings
# Example conjecture: Younger people (under 18) are more likely to rate movies extremely (1 or 5)
extreme_ratings_under_18 <- mlData[mlData$age < 18 & (mlData$rating == 1 | mlData$rating == 5), ]
extreme_rating_proportion_under_18 <- nrow(extreme_ratings_under_18) / nrow(mlData[mlData$age < 18, ])
cat("Proportion of extreme ratings (1 or 5) by people under 18:", extreme_rating_proportion_under_18, "\n")
# Aggregate average ratings by movie and gender
avg_ratings_gender <- aggregate(rating ~ movie_title + gender, data = mlData, FUN = mean)
avg_ratings_wide <- reshape(avg_ratings_gender, idvar = "movie_title", timevar = "gender", direction = "wide")
# Rename columns for clarity
colnames(avg_ratings_wide) <- c("movie_title", "rating_men", "rating_women")
# Scatter plot of men versus women and their mean rating for every movie
plot(avg_ratings_wide$rating_men, avg_ratings_wide$rating_women,
xlab = "Average Rating by Men", ylab = "Average Rating by Women",
main = "Scatter Plot of Average Ratings by Men vs Women",
col = "blue", pch = 19)
# Add a line y=x for reference
abline(a = 0, b = 1, col = "red")
# Aggregate number of ratings by movie
ratings_count <- aggregate(rating ~ movie_title, data = mlData, FUN = length)
colnames(ratings_count) <- c("movie_title", "num_ratings")
# Merge average ratings with ratings count
avg_ratings_wide <- merge(avg_ratings_wide, ratings_count, by = "movie_title")
# Scatter plot for movies rated more than 200 times
movies_rated_more_than_200 <- avg_ratings_wide[avg_ratings_wide$num_ratings > 200, ]
plot(movies_rated_more_than_200$rating_men, movies_rated_more_than_200$rating_women,
xlab = "Average Rating by Men", ylab = "Average Rating by Women",
main = "Scatter Plot of Average Ratings by Men vs Women (Movies Rated > 200 Times)",
col = "green", pch = 19)
# Add a line y=x for reference
abline(a = 0, b = 1, col = "red")
# Compute correlation coefficient between the ratings of men and women
correlation_all <- cor(avg_ratings_wide$rating_men, avg_ratings_wide$rating_women, use = "complete.obs")
cat("Correlation coefficient between ratings of men and women (all movies):", correlation_all, "\n")
correlation_200 <- cor(movies_rated_more_than_200$rating_men, movies_rated_more_than_200$rating_women, use = "complete.obs")
cat("Correlation coefficient between ratings of men and women (movies rated > 200 times):", correlation_200, "\n")
# Observations
cat("Observations:\n")
cat("The correlation coefficients suggest that the ratings by men and women are quite similar, as the correlation is close to 1. This indicates a strong positive relationship between the ratings given by both genders.\n")
cat("Ratings are more consistent for movies that have been rated more than 200 times, as indicated by the slightly higher correlation coefficient.\n")
# Conjectures
# Example conjecture: Ratings by younger men and women (under 30) might be more similar
avg_ratings_age_gender <- aggregate(rating ~ movie_title + gender + age, data = mlData, FUN = mean)
avg_ratings_age_gender_young <- avg_ratings_age_gender[avg_ratings_age_gender$age < 30, ]
avg_ratings_wide_young <- reshape(avg_ratings_age_gender_young, idvar = "movie_title", timevar = "gender", direction = "wide")
colnames(avg_ratings_wide_young) <- c("movie_title", "rating_men", "rating_women")
correlation_young <- cor(avg_ratings_wide_young$rating_men, avg_ratings_wide_young$rating_women, use = "complete.obs")
cat("Correlation coefficient between ratings of men and women (under 30):", correlation_young, "\n")
library(shiny)
library(ggplot2)
function(input, output) {
dataset <- reactive({
diamonds[sample(nrow(diamonds), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
}, height=700)
}
runApp('C:/Users/cubin/Desktop/School/DS 501/Case Study 3 Directory')
runApp('C:/Users/cubin/Desktop/School/DS 501/Case Study 3 Directory')
runApp('C:/Users/cubin/Desktop/School/DS 501/Case Study 3 Directory')
source("C:/Users/cubin/Desktop/School/DS 501/Case Study 3 Directory/Case Study 3.R")
library(shiny)
library(ggplot2)
library(dplyr)
shinyApp(ui = ui, server = server)
library(rsconnect)
deployApp()
rlang::last_trace()
runApp('C:/Users/cubin/Desktop/School/DS 501/Case Study 3 Directory')
dir.create("C:/Users/cubin/Desktop/School/DS 501/CaseStudy3CleanCLI")
setwd("C:/Users/cubin/Desktop/School/DS 501/CaseStudy3CleanCLI")
writeLines('
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
# Load the data
nba_data <- read.csv("nba_data_processed.csv")  # Ensure this file is in the same directory as your app.R
# Define the UI
ui <- fluidPage(
titlePanel("NBA Player Stats Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("predictor", "Select Predictor:",
choices = colnames(nba_data)[3:length(colnames(nba_data))]),
selectInput("response", "Select Response:",
choices = colnames(nba_data)[3:length(colnames(nba_data))]),
actionButton("run_model", "Run Model")
),
mainPanel(
plotOutput("scatterPlot"),
verbatimTextOutput("modelSummary")
)
)
)
# Define the server logic
server <- function(input, output) {
observeEvent(input$run_model, {
predictor <- input$predictor
response <- input$response
formula <- as.formula(paste(response, "~", predictor))
model <- lm(formula, data = nba_data)
output$scatterPlot <- renderPlot({
ggplot(nba_data, aes_string(x = predictor, y = response)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle(paste("Linear Regression of", response, "on", predictor))
})
output$modelSummary <- renderPrint({
summary(model)
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
', con = "app.R")
# Load necessary libraries
install.packages("shiny")
install.packages("rsconnect")
library(shiny)
library(rsconnect)
# Set account info
rsconnect::setAccountInfo(name='kshahnathwani',
token='884B07714A6430750E0B8719954FB767',
secret='mdOKvBRMy8yKdtJ4vZbCB42KYCn9dGcjsAGoqzVS')
# Deploy the application
deployApp(appDir = getwd())
setwd("C:/Users/cubin/Desktop/School/DS 501/CaseStudy3CleanCLI")
shiny::runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='kshahnathwani',
token='884B07714A6430750E0B8719954FB767',
secret='mdOKvBRMy8yKdtJ4vZbCB42KYCn9dGcjsAGoqzVS')
deployApp(appDir = getwd())
